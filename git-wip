#!/usr/bin/env python3
import contextlib
import errno
import logging
import itertools
import json
import optparse
import os
import socket
import subprocess
import sys

from typing import NewType, Optional, Tuple, List, Dict, Callable, Any, Iterable, TypeVar, Union, cast, Generic

DEV_NULL = open(os.devnull)
DRY_RUN = False
VERBOSE = False

class Sentinel(object):
	def __init__(self, desc):
		self.desc = desc
	def __str__(self): return 'Sentinel(%s)' % (self.desc,)

RUN_ANYWAY = Sentinel('RUN_ANYWAY')
EMPTY_TREE='4b825dc642cb6eb9a060e54bf8d69288fbee4904' # It's Magic(tm) (http://colinschimmelfing.com/blog/gits-empty-tree/)

Sha = NewType('Sha', str)
Ref = NewType('Ref', str)
Branch = NewType('Branch', str)
BaseBranch = NewType('BaseBranch', Branch)
WipBranch = NewType('WipBranch', Branch)
Owner = NewType('Owner', str)
Remote = NewType('Remote', str)
Commitish = Union[Sha,Ref,Branch,WipBranch,BaseBranch]
T = TypeVar('T')

# string manipulation functions
WIP_PREFIX = 'wip/'
BRANCH_PREFIX = 'refs/heads/'
REMOTE_PREFIX = 'refs/remotes/'
WIP_REF_PREFIX = BRANCH_PREFIX + WIP_PREFIX
HEAD = 'HEAD'
HEAD_REF = Ref(HEAD)
MERGE = 'MERGE'
SPECIAL_OWNERS=set([HEAD,MERGE])

def _make_wip_branch(base: BaseBranch, id: str) -> WipBranch:
	return WipBranch(Branch(WIP_PREFIX + base + '/' + id))

def my_wip_branch(conf, base: BaseBranch) -> WipBranch:
	return _make_wip_branch(base, conf.id)

def merge_wip_branch(base: BaseBranch) -> WipBranch:
	return _make_wip_branch(base, MERGE)

def ref_of_branch(branch: Branch) -> Ref:
	return Ref(BRANCH_PREFIX + branch)

# just type coersion
def commitish_of_ref(ref: Ref) -> Commitish: return ref
def commitish_of_sha(sha: Sha) -> Commitish: return sha
def string_of_branch(branch: Branch) -> str: return branch

def remove_leading(prefix, s):
	assert s.startswith(prefix)
	return s[len(prefix):]

def remove_trailing(suffix, s):
	assert s.endswith(suffix)
	return s[:-len(suffix)]

def branch_of_ref(ref: Optional[Ref]) -> Optional[Branch]:
	if ref is not None and ref.startswith(BRANCH_PREFIX):
		return Branch(remove_leading(BRANCH_PREFIX, ref))
	return None

def base_branch_of_wip_branch(branch: WipBranch) -> BaseBranch:
	return Wip.parse(branch).base

## data model

class Wip(object):
	base: BaseBranch
	owner: Optional[Owner]
	id: str

	@classmethod
	def parse(cls, branch: WipBranch) -> 'Wip':
		base_and_owner = remove_leading(WIP_PREFIX, branch)
		base, owner = base_and_owner.rsplit('/', 1)
		return Wip(BaseBranch(base), owner)

	@classmethod
	def mine(cls, conf: 'Config', base: BaseBranch) -> 'Wip':
		return Wip(base, conf.id)

	def __init__(self, base: BaseBranch, owner: str) -> None:
		self.base = base
		self.id = owner
		if owner in SPECIAL_OWNERS:
			self.owner = None
		else:
			self.owner = Owner(owner)

	@property
	def branch(self) -> WipBranch:
		return _make_wip_branch(self.base, self.id)

	@property
	def is_merge(self) -> bool: return self.id == MERGE

	@property
	def is_head(self) -> bool: return self.id == HEAD

class WipRef(object):
	ref: Ref
	wip: Wip
	sha: Sha

	@staticmethod
	def parse_remote(ref: Ref, sha: Sha) -> 'RemoteWipRef':
		remote, wip_branch = RemoteWipRef.split(ref)
		return RemoteWipRef(ref=ref, remote=remote, wip=Wip.parse(wip_branch), sha=sha)

	@staticmethod
	def parse_local(ref: Ref, sha: Sha) -> 'LocalWipRef':
		branch = branch_of_ref(ref)
		assert branch is not None, "non-branch ref: %s" % (ref,)
		wip_branch = assert_wip_branch(branch)
		return LocalWipRef(ref=ref, wip=Wip.parse(wip_branch), sha=sha)
	
	@classmethod
	def try_parse(cls, ref: Ref, sha: Sha) -> Optional['WipRef']:
		if is_remote_wip_ref(ref):
			logging.debug('ref %s is a remote wip ref' % ref)
			return cls.parse_remote(ref, sha)
		elif is_wip_ref(ref):
			logging.debug('ref %s is a local wip ref' % ref)
			return cls.parse_local(ref, sha)
		else:
			logging.debug('ref %s is not a wip ref' % ref)
			return None

	@property
	def is_local(self): return not self.is_remote

	def __eq__(self, other):
		return type(self) == type(other) and self.ref == other.ref and self.sha == other.sha

def split_remote(ref: Ref) -> Tuple[Remote, Branch]:
	remote_and_branch = remove_leading(REMOTE_PREFIX, ref)
	remote, branch = remote_and_branch.split('/',1)
	return (Remote(remote), Branch(branch))

class RemoteWipRef(WipRef):
	ref: Ref
	remote: Remote

	def __init__(self, ref: Ref, remote: Remote, wip: Wip, sha: Sha) -> None:
		self.ref = ref
		self.remote = remote
		self.wip = wip
		self.sha = sha

	@property
	def is_remote(self): return True

	@staticmethod
	def split(ref: Ref) -> Tuple[Remote, WipBranch]:
		remote_and_branch = remove_leading(REMOTE_PREFIX, ref)
		remote, branch = remote_and_branch.split('/',1)
		return (Remote(remote), assert_wip_branch(Branch(branch)))

class LocalWipRef(WipRef):
	def __init__(self, ref: Ref, wip: Wip, sha: Sha) -> None:
		self.ref = ref
		self.wip = wip
		self.sha = sha
	
	@property
	def is_remote(self): return False

class RefFilter(object):
	@staticmethod
	def mine(conf: 'Config', refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.owner == conf.id, refs))

	@staticmethod
	def for_other_machines(conf: 'Config', refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.owner is not None and ref.wip.owner != conf.id, refs))

	@staticmethod
	def merges(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.is_merge, refs))

	@staticmethod
	def non_merges(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: not ref.wip.is_merge, refs))

	@staticmethod
	def heads(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.is_head, refs))

	@staticmethod
	def for_base(base: BaseBranch, refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.base == base, refs))

	@staticmethod
	def local(refs: Iterable[WipRef]) -> List[LocalWipRef]:
		return [ref for ref in refs if isinstance(ref, LocalWipRef)]

	@staticmethod
	def remote(refs: Iterable[WipRef]) -> List[RemoteWipRef]:
		return [ref for ref in refs if isinstance(ref, RemoteWipRef)]

def is_wip_ref(ref: Ref):
	return ref.startswith(WIP_REF_PREFIX)

def is_remote_wip_ref(ref: Ref):
	if ref.startswith(REMOTE_PREFIX):
		remote, branch = split_remote(ref)
		return is_wip_branch(branch)
	return False

class PushSpec(object):
	def __init__(self, src: Branch, dest: Branch, force: bool) -> None:
		self.src = src
		self.dest = dest
		self.force = force
	
	@property
	def spec(self):
		return "%s:%s" % (self.src, self.dest)

	@classmethod
	def track(cls, local: Branch, force = False) -> 'PushSpec':
		return cls(local, local, force=force)

	@classmethod
	def delete(cls, remote: Branch) -> 'PushSpec':
		return cls(Branch(''), remote, force=False)

## machine config

class Config(object):
	opts: Any

	def __init__(self, conf, opts):
		logging.debug('Loaded machine config: %r' % (conf,))
		self.conf = conf
		self.opts = opts
	
	def get(self, name, dfl):
		if self.conf is not None:
			try:
				return self.conf[name]
			except KeyError:
				pass
		return dfl

	@property
	def id(self) -> Owner:
		id = self.get('id', None)
		if id is None:
			id = socket.gethostname()
		assert bool(id)
		return Owner(id)

	def remote(self) -> Remote:
		if self.opts.remote is not None:
			return self.opts.remote
		configured_remotes : List[Remote] = list(map(Remote, self.get('remotes', [])))
		available = available_remotes()
		for configured in configured_remotes:
			if configured in available:
				return configured
		if not available:
			die("No remotes configured")
		return available[0]

	@classmethod
	def load(cls, path: Optional[str], opts: Any) -> 'Config':
		allow_missing = False
		if path is None:
			allow_missing = True
			config_dir = os.environ.get('XDG_CONFIG_HOME')
			if config_dir is None:
				config_dir = os.path.expanduser('~/.config')
			path = os.path.join(config_dir, 'git-wip', 'config.json')
		try:
			with open(path) as f:
				return Config(json.load(f), opts)
		except OSError as e:
			if allow_missing and e.errno == errno.ENOENT:
				pass
			else:
				raise
		return Config(None, opts)

# command runners

def log_cmd(cmd):
	logging.debug('+ ' + ' '.join(cmd))

def run(cmd, dry=None) -> None:
	log_cmd(cmd)
	if DRY_RUN and dry is not RUN_ANYWAY:
		return None
	else:
		subprocess.check_call(cmd)

def run_output(cmd, dry) -> str:
	log_cmd(cmd)
	if DRY_RUN and dry is not RUN_ANYWAY:
		return dry
	return subprocess.check_output(cmd).decode('utf-8').rstrip()

def try_run(cmd, dry) -> bool:
	log_cmd(cmd)
	if DRY_RUN and dry is not RUN_ANYWAY:
		result = dry
	else:
		p = subprocess.Popen(cmd)
		p.wait()
		result = p.returncode == 0
	logging.debug(' => %s' % (result,))
	return result

def try_run_output(cmd, dry) -> Optional[str]:
	try:
		return run_output(cmd, dry=dry)
	except subprocess.CalledProcessError as e:
		return None

## pure functions

def has_changes(cached: bool = False) -> bool:
	cmd = ['git', 'diff-index', '--ignore-submodules=all', '--quiet']
	if cached:
		cmd.append('--cached')
	cmd.extend([HEAD, '--'])
	return not try_run(cmd, dry=RUN_ANYWAY)

def is_wip_branch(branch: Optional[Branch]) -> bool:
	if branch is None:
		return False
	return branch.startswith(WIP_PREFIX)

def assert_some(x: Optional[T]) -> T:
	assert x is not None
	return x

def assert_my_wip_branch(conf: Config, branch: Optional[Branch]) -> Wip:
	wip_branch = assert_wip_branch(branch)
	wip = Wip.parse(wip_branch)
	owner = wip.owner
	if owner != conf.id:
		die("WIP branch belongs to %s, but this is %s" % (owner, conf.id))
	return wip

def assert_wip_branch(branch: Optional[Branch]) -> WipBranch:
	if not is_wip_branch(branch):
		die("not a WIP branch: %s" % (branch,))
	return WipBranch(assert_some(branch))

def assert_base_branch(branch: Optional[Branch]) -> BaseBranch:
	if is_wip_branch(branch):
		die("WIP branch: %s" % (branch,))
	return BaseBranch(assert_some(branch))

def asset_branch_exists(branch: Branch):
	sha_of_commitish(branch)

def is_my_wip_branch(conf: Config, branch: Optional[Branch]) -> bool:
	if is_wip_branch(branch):
		return Wip.parse(assert_wip_branch(branch)).owner == conf.id
	return False

def wip_refs(remote: Optional[Remote]) -> Dict[Ref,WipRef]:
	lines = list(filter(bool, run_output(['git', 'show-ref'], dry=RUN_ANYWAY).splitlines()))
	rv = {}
	if remote is None:
		allow_remote = lambda _: False
	else:
		allow_remote = lambda ref: ref.remote == remote

	for line in lines:
		logging.debug('parsing line: %s' % (line,))
		sha, ref = line.split(' ', 1)
		ref = Ref(ref)
		sha = Sha(sha)
		result = WipRef.try_parse(ref, sha)
		if result is not None:
			if isinstance(result, RemoteWipRef) and not allow_remote(result):
				continue
			rv[ref] = result
	return rv

undefined = Sentinel('undefined')
def once(fn):
	undefined = Sentinel('undefined')
	result = undefined
	def wrapped():
		nonlocal result
		if result is undefined:
			result = fn()
		return result
	return wrapped

@once
def available_remotes() -> List[Remote]:
	return list(map(Remote, filter(bool, run_output(['git', 'remote'], dry=RUN_ANYWAY).splitlines())))

def is_ancestor(parent: Commitish, child: Commitish):
	return try_run(['git', 'merge-base', '--is-ancestor', parent, child], dry=RUN_ANYWAY)

def current_ref() -> Optional[Ref]:
	ref = try_run_output(['git', 'symbolic-ref', '-q', HEAD], dry=RUN_ANYWAY)
	if not ref:
		return None
	return Ref(ref)

def current_branch() -> Optional[Branch]:
	return branch_of_ref(current_ref())

def sha_of_commitish(commitish: Commitish) -> Sha:
	return Sha(run_output(['git', 'rev-parse', commitish], dry=RUN_ANYWAY))

def current_commit() -> Sha:
	return sha_of_commitish(HEAD_REF)

def current_commitish() -> Commitish:
	# returns the best commitish (branch, then ref, then sha)
	result: Optional[Commitish] = None
	ref: Optional[Ref] = current_ref()
	if ref is not None:
		# might be a branch
		branch: Optional[Commitish] = branch_of_ref(ref)
		result = branch if branch is not None else commitish_of_ref(ref)
	else:
		# not a ref
		result = commitish_of_sha(current_commit())
	# XXX not sure why this cast is needed
	return cast(Commitish, assert_some(result))

# typed git wrappers

def git_update_ref(ref: Ref, commit: Commitish) -> None:
	run(['git', 'update-ref', ref, commit])

def git_checkout_commitish(commit: Commitish) -> None:
	run(['git', 'checkout', commit, '--'])

def git_checkout_branch(branch: Branch) -> None:
	git_checkout_commitish(branch)

def git_fetch(remote: Remote, refspec: str) -> None:
	run(['git', 'fetch', remote, refspec])

def git_merge_base(a: Commitish, b: Commitish) -> Sha:
	return Sha(run_output(['git', 'merge-base', a, b], dry=RUN_ANYWAY))

def git_continueable(cmd: str, args: List[str]) -> None:
	try:
		run(['git', cmd] + args)
	except subprocess.CalledProcessError as e:
		logging.error('Dropping you into a shell to resolve ' + cmd + ' issues interactively.'
			'When you are ready to continue, press ctrl+d (or `quit`)')
		shell = os.environ.get('SHELL', 'bash')
		subprocess.Popen([shell]).wait()
		logging.info('continuing %s ...' % cmd)
		run(['git', cmd, '--continue'])

def git_rebase(args: List[str]) -> None:
	git_continueable('rebase', args)

def git_merge(args: List[str]) -> None:
	git_continueable('merge', args)

class CurrentCheckout():
	def __init__(self):
		self.commitish = None

	def move(self, branch: Branch):
		self.capture()
		git_checkout_commitish(branch)

	def capture(self):
		if self.commitish is None:
			if has_changes():
				die('you have changes')
			self.commitish = current_commitish()
	
	def restore(self):
		if self.commitish is not None:
			if current_commitish() != self.commitish:
				logging.debug('reverting checkout to %s' % (self.commitish,))
				git_checkout_commitish(self.commitish)
	
	@contextlib.contextmanager
	def restoring(self):
		try:
			# self.capture()
			yield
		finally:
			self.restore()

def parents_of_merge_commit(sha: str) -> List[str]:
	output = run_output(['git', 'cat-file', '-p', sha], dry=RUN_ANYWAY)
	parents = []
	for line in output.splitlines():
		prefix = 'parent: '
		if line.startswith(prefix):
			parents.append(remove_leading(prefix, line).strip())
		if not line:
			break
	assert len(parents) > 1, "couldn't find parents of merge commit %s" % (sha,)
	return parents

# idempotent IO functions

def ensure_wip_branch(conf: Config) -> None:
	logging.debug('ensuring WIP branch')
	branch = current_branch()
	if not branch:
		die('you are not on a branch')
	if is_wip_branch(branch=branch):
		wip_branch = assert_my_wip_branch(conf, branch)
		logging.debug('currently on WIP branch for (%s)' % (wip_branch.base))
		return
	else:
		my_wip = my_wip_branch(conf=conf, base=assert_base_branch(branch))
		logging.debug('checking out %s (from %s)' % (my_wip, branch))
		git_update_ref(ref_of_branch(my_wip), HEAD_REF)
		git_checkout_branch(my_wip)

def update_merge_branch(remote_merge: RemoteWipRef, local_merge: LocalWipRef):
	assert remote_merge.wip.base == local_merge.wip.base
	assert remote_merge.wip.is_merge and local_merge.wip.is_merge
	if is_ancestor(local_merge.ref, remote_merge.ref):
		git_update_ref(local_merge.ref, remote_merge.ref)
	else:
		die('local branch %s has diverged from %s' % (local_merge.wip.branch, remote_merge.ref))

def ensure_merge_branch(conf: Config, base: BaseBranch) -> WipBranch:
	refs = list(wip_refs(conf.remote()).values())
	merges = RefFilter.merges(RefFilter.for_base(base, refs))
	local_merge = first(RefFilter.local(merges))
	remote_merge = first(RefFilter.remote(merges))
	merge_branch = merge_wip_branch(base)

	def write_merge_branch(commit: Commitish) -> None:
		git_update_ref(ref_of_branch(merge_branch), commit)

	if local_merge is None:
		# branch needs creating
		if remote_merge is None:
			# there are no merge branches at all, fabricate one
			empty_commit = Sha(run_output(['git', 'commit-tree', EMPTY_TREE, '-m', 'empty'], dry='FAKE_COMMIT'))
			write_merge_branch(empty_commit)
		else:
			write_merge_branch(remote_merge.ref)
	else:
		# we have a local branch, just make sure it's up to date:
		if remote_merge is not None:
			update_merge_branch(remote_merge, local_merge)
	return merge_branch

def save_changes(conf: Config) -> None:
	if has_changes():
		ensure_wip_branch(conf)
		# there are some changes
		if has_changes(cached=True):
			# staged changes
			logging.info('storing staged changes...')
			run(['git', 'commit', '-m', 'WIP (staged)'])
		if has_changes():
			logging.info('storing uncommitted changes...')
			run(['git', 'commit', '-a', '-m', 'WIP (uncommitted)'])

def pull_changes(remote: Remote) -> None:
	logging.info('fetching wips from %s...' % (remote,))
	SLASH = '/'
	git_fetch(remote,
		# e.g. 'refs/heads/wip/*:refs/remotes/origin/wip/*'
		'+' + WIP_REF_PREFIX + '*:' + REMOTE_PREFIX + remote + SLASH + WIP_PREFIX + '*')

def get_pushable_refs(conf: Config) -> List[PushSpec]:
	refs = list(wip_refs(conf.remote()).values())
	result = []
	my_refs = RefFilter.mine(conf, refs)
	my_local_refs = RefFilter.local(my_refs)
	my_remote_refs = RefFilter.remote(my_refs)
	merge_refs = RefFilter.merges(refs)
	local_merge_refs = RefFilter.local(merge_refs)
	remote_merge_refs = RefFilter.remote(merge_refs)

	for local in my_local_refs:
		branch = local.wip.branch
		remote = first(RefFilter.for_base(local.wip.base, my_remote_refs))
		if remote is None:
			result.append(PushSpec.track(branch))
			logging.debug("remote branch %s will be created at %s" % (
				branch, local.sha))
		elif remote.sha != local.sha:
			force = not is_ancestor(remote.sha, local.sha)
			logging.debug("remote branch %s (at %s) will be %s to %s" % (
				branch, remote.sha, 'force pushed' if force else 'fast forwarded', local.sha))
			result.append(PushSpec.track(branch, force=force))
		else:
			logging.debug("remote branch %s is up to date")
	
	for remote in my_remote_refs:
		if first(RefFilter.for_base(remote.wip.base, my_local_refs)) is None:
			logging.debug('removing remote branch %s' % (remote.wip.branch))
			result.append(PushSpec.delete(remote.wip.branch))

	for local_merge in local_merge_refs:
		branch = local_merge.wip.branch
		remote_merge = first(RefFilter.for_base(local_merge.wip.base, remote_merge_refs))
		if remote_merge is None:
			result.append(PushSpec.track(branch))
		else:
			if local_merge.sha == remote_merge.sha:
				logging.debug('remote branch %s is up to date (%s)' % (branch, remote_merge.sha))
			else:
				logging.debug('pushing update to %s (%s -> %s)' % (
					branch,
					remote_merge.sha,
					local_merge.sha
				))
				result.append(PushSpec.track(branch, force=True))

	return result

def garbage_collect(conf: Config) -> None:
	# delete wips for deleted branches
	# TODO ...
	pass

def push_refs(remote: Remote, specs: List[PushSpec]) -> None:
	if not specs:
		logging.info("Nothing to push")
		return
	else:
		logging.info("Pushing %d refs to %s" % (len(specs), remote))

	def do_push(specs: Iterable[PushSpec], force: bool):
		if not specs:
			return
		cmd = ['git', 'push']
		if force:
			cmd.append('-f')
		cmd.append(remote)
		cmd.extend([spec.spec for spec in specs])
		run(cmd)

	do_push(filter(lambda spec: spec.force, specs), force=True)
	do_push(filter(lambda spec: not spec.force, specs), force=False)

## Utils:

def die(msg: str) -> None:
	raise AssertionError(msg)

def first(items: Iterable[T]) -> Optional[T]:
	try:
		return next(iter(items))
	except StopIteration:
		return None

def only(items: List[T]) -> T:
	if len(items) != 1:
		raise ValueError('expected single-length list, git %r' % (items,))
	return items[0]

## CLI actions:

def branch_status(conf: Config):
	branch = branch_of_ref(current_ref())
	suffix = ' (with uncommitted changes)' if has_changes() else ''
	def status(msg: str) -> None:
		print(msg + suffix)

	if branch:
		if is_wip_branch(branch):
			wip = Wip.parse(assert_wip_branch(branch))
			if is_my_wip_branch(conf, branch):
				status('WIP branch: %s' % (wip.branch))
			elif wip.owner:
				status('WIP branch belonging to: %s' % (wip.owner))
			else:
				status('%s WIP branch: %s' % (wip.id, wip.branch))
		else:
			status('branch: %s' % (branch,))
	else:
		status('no branch (%s)' % (current_commit()))

def status_action(conf: Config):
	print("")
	branch_status(conf)
	refs = list(wip_refs(conf.remote()).values())
	if refs:
		def wip_name(ref: WipRef) -> str:
			branch = branch_of_ref(ref.ref)
			return branch or ref.ref

		pushable_refs = get_pushable_refs(conf)
		local_wips = RefFilter.local(RefFilter.mine(conf, refs))
		remote_wips = RefFilter.remote(RefFilter.for_other_machines(conf, refs))
		if remote_wips:
			print('Remote WIP branches:')
			for remote_wip in sorted(remote_wips, key=wip_name):
				print(' - %s/%s (%s)' % (remote_wip.remote, remote_wip.wip.base, remote_wip.wip.id))
		if local_wips:
			print('Local WIP branches for `%s`: (%d to push)' % (conf.id, len(pushable_refs,)))
			for local_wip in sorted(local_wips, key=wip_name):
				requires_push = any([spec.src == local_wip.wip.branch for spec in pushable_refs])
				suffix = ' (*)' if requires_push else ''
				print(' - %s%s' % (local_wip.wip.base, suffix))

def save_action(conf: Config):
	if not has_changes():
		die('no changes to save')
	ensure_wip_branch(conf)
	save_changes(conf)
	# update_refs(conf)

def fetch_action(conf: Config):
	if conf.opts.offline: return False
	pull_changes(conf.remote())
	merge_refs = RefFilter.merges(list(wip_refs(conf.remote()).values()))
	remote_merge_refs = RefFilter.remote(merge_refs)
	local_merge_refs = RefFilter.local(merge_refs)

	# update all tracked merge branches
	for remote_merge in remote_merge_refs:
		local_merge = first(RefFilter.local(RefFilter.for_base(remote_merge.wip.base, local_merge_refs)))
		if local_merge is not None:
			update_merge_branch(remote_merge, local_merge)

def show_update_action(conf: Config):
	_update_action(conf, show=True)

def update_action(conf: Config):
	fetch_action(conf)
	_update_action(conf, show=False)

def _update_action(conf: Config, show=False):
	refs = list(wip_refs(conf.remote()).values())
	current_checkout = CurrentCheckout()

	def update_branch(base: BaseBranch):
		remote_refs = RefFilter.remote(RefFilter.for_base(base, RefFilter.for_other_machines(conf, refs)))
		if not remote_refs:
			logging.info('no remote WIP branches for %s found' % (base))
			return

		my_wip = Wip.mine(conf, base)
		merge_branch = merge_wip_branch(base)
		current_checkout.move(my_wip.branch)
		def is_unmerged(remote: RemoteWipRef) -> bool:
			if is_ancestor(remote.sha, my_wip.branch):
				return False
			if is_ancestor(remote.sha, merge_branch):
				return False
			return True

		unmerged_remote_wips = filter(is_unmerged, remote_refs)
		unmerged_branches: List[Ref] = list(map(lambda wip: wip.ref, unmerged_remote_wips))
		if not is_ancestor(base, my_wip.branch):
			unmerged_branches.append(ref_of_branch(base))
		if not unmerged_branches:
			logging.info('%s is up to date with %s' % (my_wip.branch, ', '.join([wip.wip.branch for wip in remote_refs])))
			return
		if show:
			args: List[str] = [x for x in unmerged_branches] # type coersion
			run(['git', 'show-branch', base, my_wip.branch] + args, dry=RUN_ANYWAY)
		else:
			logging.info('merging: %s' % (', '.join(unmerged_branches)))
			args: List[str] = [x for x in unmerged_branches] # type coersion
			git_merge(['--no-edit'] + args)

	with current_checkout.restoring():
		if conf.opts.branch:
			update_branch(assert_base_branch(Branch(conf.opts.branch)))
		else:
			my_refs = RefFilter.mine(conf, refs)
			my_local_refs = RefFilter.local(my_refs)
			# update all branches with a local wip
			for wipref in my_local_refs:
				update_branch(wipref.wip.base)

def delete_wip_branch_for(conf: Config, base: BaseBranch):
	wip = Wip.mine(conf, base)
	wip_branch = wip.branch
	branch_head = sha_of_commitish(wip_branch)
	if current_branch() == wip_branch:
		logging.info('checking out base branch %s' % (wip.base,))
		git_checkout_branch(wip.base)

	logging.info('deleting branch %s (%s)' % (wip_branch, branch_head))
	run(['git', 'branch', '-D', wip_branch])

def delete_action(conf: Config):
	if conf.opts.branch:
		delete_wip_branch_for(conf, assert_base_branch(conf.opts.branch))
	else:
		# delete current branch
		branch = current_branch()
		if not branch:
			die('not on a branch (and --branch  not specified)')
		if is_wip_branch(branch):
			base_branch = Wip.parse(assert_wip_branch(branch)).base
		else:
			base_branch = assert_base_branch(branch)
		delete_wip_branch_for(conf, base_branch)

def specified_base_branch(opts) -> BaseBranch:
	if opts.branch:
		base_branch = assert_base_branch(opts.branch)
	else:
		branch = current_branch()
		if not branch:
			die('not on a branch (and --branch  not specified)')
		if is_wip_branch(branch):
			base_branch = Wip.parse(assert_wip_branch(branch)).base
		else:
			base_branch = assert_base_branch(branch)
	return base_branch

def checkout_action(conf: Config):
	base = specified_base_branch(conf.opts)
	git_checkout_branch(base)
	ensure_wip_branch(conf)

def sync_action(conf: Config):
	fetch_action(conf)
	if has_changes():
		save_action(conf)
	push_action(conf)

def push_action(conf: Config):
	if conf.opts.offline: return
	refs = get_pushable_refs(conf)
	push_refs(conf.remote(), refs)
	fetch_action(conf)

def diff_action(conf: Config):
	ref : Optional[Ref] = current_ref()
	branch : WipBranch = assert_wip_branch(branch_of_ref(ref))
	base: BaseBranch = base_branch_of_wip_branch(branch)
	run(['git', 'diff', base], dry=RUN_ANYWAY)

def show_action(conf: Config):
	base: BaseBranch = specified_base_branch(conf.opts)
	refs = RefFilter.non_merges(RefFilter.for_base(base, list(wip_refs(conf.remote()).values())))
	local_refs = RefFilter.local(refs)
	remote_refs = RefFilter.remote(RefFilter.for_other_machines(conf, refs))

	def ref_of_wip_ref(ref: WipRef) -> str:
		return ref.ref

	branches: List[str] = [string_of_branch(base)] + (
		list(map(ref_of_wip_ref, local_refs)) +
		list(map(ref_of_wip_ref, remote_refs))
	)
	run(['git', 'show-branch'] + branches)

def merge_action(conf: Config):
	if has_changes():
		die('you have uncommitted changes')
	optional_ref: Optional[Ref] = current_ref()
	optional_branch: Optional[Branch] = branch_of_ref(optional_ref)
	if optional_branch is None:
		die('not on a branch')
	ref: Ref = assert_some(optional_ref)
	branch: Branch = assert_some(optional_branch)
	
	base: BaseBranch = base_branch_of_wip_branch(assert_wip_branch(branch))

	refs: Dict[Ref,WipRef] = wip_refs(conf.remote())
	wip_ref: WipRef = refs[ref]
	logging.info("merging branch %s (%s) into %s" % (branch, wip_ref.sha, base,))
	merge_branch = ensure_merge_branch(conf, base)

	current_checkout = CurrentCheckout()
	with current_checkout.restoring():
		current_checkout.move(base)
		git_merge(['--squash', ref])
		run(['git', 'commit', '-v', '--edit', '-m', 'merge WIP changes'])
		# OK, merge succeeded. update wip/<branch>/MERGE to mark when these WIP commits were merged
		merge_commit = Sha(run_output(['git', 'commit-tree', EMPTY_TREE, '-m', 'merge'], dry='MERGE_SHA'))
		git_update_ref(ref_of_branch(merge_branch), merge_commit)
	delete_wip_branch_for(conf, base)

def perform_interactive_rebase(filename: str):
	commits = []
	with open(filename) as f:
		for lines in f:
			line = line.strip()
			if line.startswith('#'):
				logging.debug('dropping line: %s' % (line,))
			else:
				commits.append(line.split()[0])
	logging.debug('original commit seqence: %r' % (commits,))

	keep_commits = os.environ['GIT_WIP_KEEP_COMMITS']
	drop_commits = os.environ['GIT_WIP_DROP_COMMITS']
	expected_commits = set(keep_commits).union(drop_commits)
	if set(commits) != expected_commits:
		die('Expected commits: %r. Got %r' % (expected_commits, commits))

	with open(filename, 'w') as f:
		for commit in commits:
			if commit in keep_commits:
				logging.debug('keeping commit %s' % (commit,))
				print('keep ' + commit, file=f)
			else:
				logging.debug('dropping commit %s' % (commit,))

## main

def main() -> None:
	global DRY_RUN, VERBOSE

	usage='\n'.join([
		'git wip [action [action ...]]',
		'',
		'Actions:',
		' status:   default, show WIP details',
		' fetch:    fetch WIPs from remote',
		' push:     push WIPs to remote',
		' save:     commit changes as WIP',
		' update:   merge WIPs from other hosts',
		' merge:    commit WIP to mainline branch (as a squashed commit)',
		' sync:     fetch, save & push',

		' checkout: move to a WIP branch',
		' rm:       remove a WIP branch',
		' diff:     show differences on WIP branch',
		' show:     show WIP branches (using git show-branch)',
	])
	p = optparse.OptionParser(usage=usage)
	p.add_option('-v', '--verbose', action='store_true')
	p.add_option('-n', '--dry-run', action='store_true')
	p.add_option('-o', '--offline', action='store_true')
	p.add_option('-r', '--remote', action='store')
	p.add_option('-c', '--config', action='store')
	p.add_option('-b', '--branch', action='store')

	opts, args = p.parse_args()
	logging.basicConfig(
		format='%(levelname)5s: %(message)s',
		level = (logging.DEBUG if opts.verbose else logging.INFO)
	)

	if opts.dry_run:
		DRY_RUN = True
	if opts.verbose:
		VERBOSE = True

	if 'rebase-sequence' in args:
		(filename,) = args
		perform_interactive_rebase(filename)

	def help_action(conf):
		p.print_help()
		sys.exit(1)

	actions: Dict[str,Callable[[Config],None]] = {
		'status': status_action,
		'show': show_action,
		'checkout': checkout_action,
		'rm': delete_action,
		'fetch': fetch_action,
		'save': save_action,
		'sync': sync_action,
		'push': push_action,
		'diff': diff_action,
		'update': update_action,
		'show-update': show_update_action,
		'merge': merge_action,
		'help': help_action,
	}

	unknown_actions = set(args).difference(actions.keys())
	if unknown_actions:
		die("Unknown action(s): %s" % (', '.join(sorted(unknown_actions)),))

	conf = Config.load(opts.config, opts)

	# default to status
	if not args:
		args.append('status')

	for action in args:
		actions[action](conf)


if __name__ == '__main__':
	try:
		main()
	except (subprocess.CalledProcessError, AssertionError) as e:
		if VERBOSE:
			raise
		else:
			logging.error(str(e))
			sys.exit(1)
