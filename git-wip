#!/usr/bin/env python3
import contextlib
import errno
import logging
import itertools
import json
import optparse
import os
import socket
import subprocess
import sys

from typing import NewType, Optional, Tuple, List, Dict, Callable, Any, Iterable, TypeVar, Union, cast, Generic

DEV_NULL = open(os.devnull)
DRY_RUN = False
VERBOSE = False

class Sentinel(object):
	def __init__(self, desc):
		self.desc = desc
	def __str__(self): return 'Sentinel(%s)' % (self.desc,)

RUN_ANYWAY = Sentinel('RUN_ANYWAY')
EMPTY_TREE='4b825dc642cb6eb9a060e54bf8d69288fbee4904' # It's Magic(tm) (http://colinschimmelfing.com/blog/gits-empty-tree/)

Sha = NewType('Sha', str)
Ref = NewType('Ref', str)
Branch = NewType('Branch', str)
BaseBranch = NewType('BaseBranch', Branch)
WipBranch = NewType('WipBranch', Branch)
Remote = NewType('Remote', str)
Commitish = Union[Sha,Ref,Branch,WipBranch,BaseBranch]
T = TypeVar('T')
GitConfigKey = Tuple[Optional[Branch],str]

# string manipulation functions
CONFIG_SCOPE = 'wip'
CONFIG_PREFIX = CONFIG_SCOPE + '.'
WIP_PREFIX = 'wip/'
BRANCH_PREFIX = 'refs/heads/'
REMOTE_PREFIX = 'refs/remotes/'
WIP_REF_PREFIX = BRANCH_PREFIX + WIP_PREFIX
HEAD = 'HEAD'
HEAD_REF = Ref(HEAD)
MERGE = 'MERGE'
SPECIAL_OWNERS=set([HEAD,MERGE])

def make_wip_branch(base: BaseBranch) -> WipBranch:
	return WipBranch(Branch(WIP_PREFIX + base))

def merge_wip_branch() -> WipBranch:
	return make_wip_branch(BaseBranch(Branch(MERGE)))

def ref_of_branch(branch: Branch) -> Ref:
	return Ref(BRANCH_PREFIX + branch)

# just type coersion
def commitish_of_ref(ref: Ref) -> Commitish: return ref
def commitish_of_sha(sha: Sha) -> Commitish: return sha
def string_of_branch(branch: Branch) -> str: return branch

def remove_leading(prefix, s):
	assert s.startswith(prefix)
	return s[len(prefix):]

def remove_trailing(suffix, s):
	assert s.endswith(suffix)
	return s[:-len(suffix)]

def branch_of_ref(ref: Optional[Ref]) -> Optional[Branch]:
	if ref is not None and ref.startswith(BRANCH_PREFIX):
		return Branch(remove_leading(BRANCH_PREFIX, ref))
	return None

def base_branch_of_wip_branch(branch: WipBranch) -> BaseBranch:
	return Wip.parse(branch).base

## data model

class Wip(object):
	base: BaseBranch

	@classmethod
	def parse(cls, branch: WipBranch) -> 'Wip':
		base = remove_leading(WIP_PREFIX, branch)
		return Wip(BaseBranch(base))

	def __init__(self, base: BaseBranch) -> None:
		self.base = base

	@property
	def branch(self) -> WipBranch:
		return make_wip_branch(self.base)

	@property
	def is_merge(self) -> bool:
		return self.base == MERGE

	@property
	def is_head(self) -> bool: return self.base == HEAD

	def __repr__(self):
		return "Wip(%s)" % (self.base)

class WipRef(object):
	ref: Ref
	wip: Wip
	sha: Sha

	@staticmethod
	def parse_remote(ref: Ref, sha: Sha) -> 'RemoteWipRef':
		remote, wip_branch = RemoteWipRef.split(ref)
		return RemoteWipRef(ref=ref, remote=remote, wip=Wip.parse(wip_branch), sha=sha)

	@staticmethod
	def parse_local(ref: Ref, sha: Sha) -> 'LocalWipRef':
		branch = branch_of_ref(ref)
		assert branch is not None, "non-branch ref: %s" % (ref,)
		wip_branch = assert_wip_branch(branch)
		return LocalWipRef(ref=ref, wip=Wip.parse(wip_branch), sha=sha)

	@classmethod
	def try_parse(cls, ref: Ref, sha: Sha) -> Optional['WipRef']:
		if is_remote_wip_ref(ref):
			logging.debug('ref %s is a remote wip ref' % ref)
			return cls.parse_remote(ref, sha)
		elif is_wip_ref(ref):
			logging.debug('ref %s is a local wip ref' % ref)
			return cls.parse_local(ref, sha)
		else:
			logging.debug('ref %s is not a wip ref' % ref)
			return None

	@property
	def is_local(self): return not self.is_remote

	def __eq__(self, other):
		return type(self) == type(other) and self.ref == other.ref and self.sha == other.sha

	def __repr__(self):
		return "%s(%s, %s, %s)" % (type(self).__name__, self.ref, self.wip, self.sha)

def split_remote(ref: Ref) -> Tuple[Remote, Branch]:
	remote_and_branch = remove_leading(REMOTE_PREFIX, ref)
	remote, branch = remote_and_branch.split('/',1)
	return (Remote(remote), Branch(branch))

class RemoteWipRef(WipRef):
	ref: Ref
	remote: Remote

	def __init__(self, ref: Ref, remote: Remote, wip: Wip, sha: Sha) -> None:
		self.ref = ref
		self.remote = remote
		self.wip = wip
		self.sha = sha

	@property
	def is_remote(self): return True

	@staticmethod
	def split(ref: Ref) -> Tuple[Remote, WipBranch]:
		remote_and_branch = remove_leading(REMOTE_PREFIX, ref)
		remote, branch = remote_and_branch.split('/',1)
		return (Remote(remote), assert_wip_branch(Branch(branch)))

class LocalWipRef(WipRef):
	def __init__(self, ref: Ref, wip: Wip, sha: Sha) -> None:
		self.ref = ref
		self.wip = wip
		self.sha = sha

	@property
	def is_remote(self): return False

class RefFilter(object):
	@staticmethod
	def merges(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.is_merge, refs))

	@staticmethod
	def non_merges(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: not ref.wip.is_merge, refs))

	@staticmethod
	def heads(refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.is_head, refs))

	@staticmethod
	def for_base(base: BaseBranch, refs: Iterable[WipRef]) -> List[WipRef]:
		return list(filter(lambda ref: ref.wip.base == base, refs))

	@staticmethod
	def local(refs: Iterable[WipRef]) -> List[LocalWipRef]:
		return [ref for ref in refs if isinstance(ref, LocalWipRef)]

	@staticmethod
	def remote(refs: Iterable[WipRef]) -> List[RemoteWipRef]:
		return [ref for ref in refs if isinstance(ref, RemoteWipRef)]

	@staticmethod
	def for_remote(remote: Remote, wip: Wip, refs: Iterable[RemoteWipRef]) -> Optional[RemoteWipRef]:
		def eq(remote_wip: RemoteWipRef):
			return remote_wip.remote == remote and remote_wip.wip == wip
		return first(filter(eq, refs))

def is_wip_ref(ref: Ref):
	return ref.startswith(WIP_REF_PREFIX)

def is_remote_wip_ref(ref: Ref):
	if ref.startswith(REMOTE_PREFIX):
		remote, branch = split_remote(ref)
		return is_wip_branch(branch)
	return False

class PushSpec(object):
	def __init__(self, src: Optional[Branch], dest: Branch, remote: Optional[Remote]) -> None:
		self.src = src
		self.dest = dest
		self.remote = remote

	def __repr__(self):
		return "PushSpec(%r,%r,%r)" % (self.src, self.dest, self.remote)

	def is_for_remote(self, remote: Remote) -> bool:
		return self.remote is None or self.remote == remote

	@property
	def spec(self):
		src = "" if self.src is None else self.src
		return "%s:%s" % (src, self.dest)

	def local_ref(self, remote: Remote) -> Ref:
		return Ref("refs/remotes/%s/%s" % (remote, self.dest))

	@classmethod
	def track(cls, local: Branch) -> 'PushSpec':
		return cls(local, local, remote = None)

	@classmethod
	def delete(cls, remote: Remote, branch: Branch) -> 'PushSpec':
		return cls(None, branch, remote)

## machine config

class GitConfig(object):
	def __init__(self, conf: Dict[GitConfigKey,List[str]], branch: Optional[Branch]):
		self.conf = conf
		self.branch = branch

	def __str__(self):
		return "GitConfig(%r, %r)" % self.conf, self.branch

	def __getitem__(self, key: str) -> List[str]:
		try:
			return self.conf[GitConfig.key(key, scope=self.branch)]
		except KeyError:
			if self.branch:
				# fallback to branch-agnostic config
				return self.conf[GitConfig.key(key)]
			else:
				raise

	@staticmethod
	def key(key, scope=None) -> GitConfigKey:
		return (scope, key)

class Config(object):
	opts: Any

	def __init__(self, conf: Dict[str,Any], git_conf: GitConfig, opts):
		logging.debug('Loaded machine config: %r' % (conf,))
		self.conf = conf
		self.git_conf = git_conf
		self.opts = opts

	def _get_any(self, name, dfl) -> Any:
		try:
			value = self.git_conf[name]
			logging.debug("got git config %r = %r" % (name, value))
			return value
		except KeyError:
			pass

		try:
			value = self.conf[name]
			logging.debug("got JSON config %r = %r" % (name, value))
			return value
		except KeyError:
			pass
		logging.debug("config %s not found, returning default %r" % (name, dfl,))
		return dfl

	def get_all(self, name, dfl) -> List[Any]:
		value = self._get_any(name, dfl)
		if not isinstance(value, list):
			value = [value]
		return value

	def get_first(self, name, dfl) -> Any:
		value = self._get_any(name, dfl)
		if isinstance(value, list):
			value = value[0]
		return value

	def explicit_remote(self) -> Optional[Remote]:
		return self.opts.remote

	def remotes(self) -> List[Remote]:
		if self.opts.remote is not None:
			return [self.opts.remote]
		configured_remotes : List[Remote] = list(map(Remote, self.get_all('remote', ['origin'])))
		logging.debug('configured remotes: %r' % configured_remotes,)
		available = available_remotes()
		if not available:
			die("No remotes configured")
		filtered = list(filter(lambda x: x in available, configured_remotes))
		if filtered:
			return filtered
		return available

	@classmethod
	def load(cls, path: Optional[str], opts: Any) -> 'Config':
		allow_missing = False
		loaded_config: Dict[str,Any] = {}
		if path is None:
			allow_missing = True
			config_dir = os.environ.get('XDG_CONFIG_HOME')
			if config_dir is None:
				config_dir = os.path.expanduser('~/.config')
			path = os.path.join(config_dir, 'git-wip', 'config.json')
		try:
			with open(path) as f:
				loaded_config = json.load(f)
		except OSError as e:
			if allow_missing and e.errno == errno.ENOENT:
				pass
			else:
				raise

		conf_output = subprocess.check_output(['git', 'config', '--list', '--null'])
		git_conf: Dict[GitConfigKey,List[str]] = {}
		for kv in conf_output.split(b'\0'):
			if len(kv) == 0: continue
			key, value = kv.decode('utf-8').split('\n', 1)
			if key.startswith(CONFIG_PREFIX):
				key_parts = key.split('.')
				key_parts.pop(0)
				key_leaf = key_parts.pop()
				key_scope = Branch('.'.join(key_parts)) if key_parts else None
				conf_key = GitConfig.key(key_leaf, scope=key_scope)

				# insert all values as lists
				try:
					dest = git_conf[conf_key]
				except KeyError:
					dest = []
					git_conf[conf_key] = dest
				dest.append(value)

		logging.debug('Loaded git config: %r' % git_conf,)
		base_branch = get_base_branch(opts)
		return Config(loaded_config, GitConfig(git_conf, base_branch), opts)

# command runners

def log_cmd(cmd, lvl=logging.DEBUG):
	logging.log(lvl, '+ ' + ' '.join(cmd))

def run(cmd, dry=None, lvl=logging.DEBUG) -> None:
	log_cmd(cmd, lvl=lvl)
	if DRY_RUN and dry is not RUN_ANYWAY:
		return None
	else:
		subprocess.check_call(cmd)

def run_popen(cmd, dry=None, lvl=logging.DEBUG, **k) -> subprocess.Popen:
	log_cmd(cmd, lvl=lvl)
	if DRY_RUN and dry is not RUN_ANYWAY:
		return subprocess.Popen(['echo', '1'])
	else:
		return subprocess.Popen(cmd)

def run_output(cmd, dry, lvl=logging.DEBUG) -> str:
	log_cmd(cmd, lvl=lvl)
	if DRY_RUN and dry is not RUN_ANYWAY:
		return dry
	return subprocess.check_output(cmd).decode('utf-8').rstrip()

def try_run(cmd, dry, lvl=logging.DEBUG, acceptable_code: Callable[[int], bool] = lambda _: True) -> bool:
	log_cmd(cmd, lvl=lvl)
	if DRY_RUN and dry is not RUN_ANYWAY:
		result = dry
	else:
		p = subprocess.Popen(cmd)
		p.wait()
		result = p.returncode == 0
		if not acceptable_code(p.returncode):
			raise AssertionError("process return code (%s) is not acceptable" % p.returncode)
	logging.debug(' => %s' % (result,))
	return result

def try_run_output(cmd, dry, lvl=logging.DEBUG) -> Optional[str]:
	try:
		return run_output(cmd, dry=dry, lvl=lvl)
	except subprocess.CalledProcessError as e:
		return None

## pure functions

def has_changes(cached: bool = False) -> bool:
	cmd = ['git', 'diff-index', '--ignore-submodules=all', '--quiet']
	if cached:
		cmd.append('--cached')
	cmd.extend([HEAD, '--'])
	return not try_run(cmd, dry=RUN_ANYWAY)

def is_wip_branch(branch: Optional[Branch]) -> bool:
	if branch is None:
		return False
	return branch.startswith(WIP_PREFIX)

def assert_some(x: Optional[T]) -> T:
	assert x is not None
	return x

def assert_my_wip_branch(conf: Config, branch: Optional[Branch]) -> Wip:
	wip_branch = assert_wip_branch(branch)
	return Wip.parse(wip_branch)

def assert_wip_branch(branch: Optional[Branch]) -> WipBranch:
	if not is_wip_branch(branch):
		die("not a WIP branch: %s" % (branch,))
	return WipBranch(assert_some(branch))

def assert_base_branch(branch: Optional[Branch]) -> BaseBranch:
	if is_wip_branch(branch):
		die("WIP branch: %s" % (branch,))
	return BaseBranch(assert_some(branch))

def asset_branch_exists(branch: Branch):
	sha_of_commitish(branch)

def wip_refs(remote: Optional[Remote]) -> Dict[Ref,WipRef]:
	lines = list(filter(bool, run_output(['git', 'show-ref'], dry=RUN_ANYWAY).splitlines()))
	rv = {}
	if remote is None:
		allow_remote = lambda _: True
	else:
		allow_remote = lambda ref: ref.remote == remote

	for line in lines:
		logging.debug('parsing line: %s' % (line,))
		sha, ref = line.split(' ', 1)
		ref = Ref(ref)
		sha = Sha(sha)
		result = WipRef.try_parse(ref, sha)
		if result is not None:
			if isinstance(result, RemoteWipRef) and not allow_remote(result):
				logging.debug("Skipping remote ref %s (looking for remote %s)" % (result, remote))
				continue
			rv[ref] = result
	return rv

undefined = Sentinel('undefined')
def once(fn):
	result = undefined
	def wrapped():
		nonlocal result
		if result is undefined:
			result = fn()
		return result
	return wrapped

@once
def available_remotes() -> List[Remote]:
	return list(map(Remote, filter(bool, run_output(['git', 'remote'], dry=RUN_ANYWAY).splitlines())))

def is_ancestor(parent: Commitish, child: Commitish):
	return try_run(['git', 'merge-base', '--is-ancestor', parent, child], dry=RUN_ANYWAY, acceptable_code = lambda x: x in (0,1))

def current_ref() -> Optional[Ref]:
	ref = try_run_output(['git', 'symbolic-ref', '-q', HEAD], dry=RUN_ANYWAY)
	if not ref:
		return None
	return Ref(ref)

def current_branch() -> Optional[Branch]:
	return branch_of_ref(current_ref())

def sha_of_commitish(commitish: Commitish) -> Sha:
	return Sha(run_output(['git', 'rev-parse', commitish], dry=RUN_ANYWAY))

def current_commit() -> Sha:
	return sha_of_commitish(HEAD_REF)

def current_commitish() -> Commitish:
	# returns the best commitish (branch, then ref, then sha)
	result: Optional[Commitish] = None
	ref: Optional[Ref] = current_ref()
	if ref is not None:
		# might be a branch
		branch: Optional[Commitish] = branch_of_ref(ref)
		result = branch if branch is not None else commitish_of_ref(ref)
	else:
		# not a ref
		result = commitish_of_sha(current_commit())
	# XXX not sure why this cast is needed
	return cast(Commitish, assert_some(result))

# typed git wrappers

def git_delete_ref(ref: Ref) -> None:
	run(['git', 'update-ref', '-d', ref])

def git_update_ref(ref: Ref, commit: Commitish) -> None:
	run(['git', 'update-ref', ref, commit])

def git_checkout_commitish(commit: Commitish) -> None:
	run(['git', 'checkout', commit, '--'])

def git_checkout_branch(branch: Branch) -> None:
	git_checkout_commitish(branch)

def git_fetch(remote: Remote, refspec: str) -> None:
	run(['git', 'fetch', remote, refspec])

def git_merge_base(a: Commitish, b: Commitish) -> Sha:
	return Sha(run_output(['git', 'merge-base', a, b], dry=RUN_ANYWAY))

def git_continueable(cmd: str, args: List[str]) -> None:
	try:
		run(['git', cmd] + args)
	except subprocess.CalledProcessError as e:
		logging.error('Dropping you into a shell to resolve ' + cmd + ' issues interactively.'
			'When you are ready to continue, press ctrl+d (or `quit`)')
		shell = os.environ.get('SHELL', 'bash')
		subprocess.Popen([shell]).wait()
		logging.info('continuing %s ...' % cmd)
		run(['git', cmd, '--continue'])

def git_rebase(args: List[str]) -> None:
	git_continueable('rebase', args)

def git_merge(args: List[str]) -> None:
	git_continueable('merge', args)

class CurrentCheckout():
	def __init__(self):
		self.commitish = None

	def move(self, branch: Branch):
		self.capture()
		git_checkout_commitish(branch)

	def capture(self):
		if self.commitish is None:
			if has_changes():
				die('you have changes')
			self.commitish = current_commitish()

	def restore(self):
		if self.commitish is not None:
			if current_commitish() != self.commitish:
				logging.debug('reverting checkout to %s' % (self.commitish,))
				git_checkout_commitish(self.commitish)

	@contextlib.contextmanager
	def restoring(self):
		try:
			self.capture()
			yield
		finally:
			self.restore()

# idempotent IO functions

def ensure_wip_branch(conf: Config) -> None:
	logging.debug('ensuring WIP branch')
	branch = current_branch()
	if not branch:
		die('you are not on a branch')
	else:
		if is_wip_branch(branch):
			logging.debug('currently on WIP branch (%s)' % (branch))
			return
		else:
			# TODO support named wips without a base branch
			my_wip = make_wip_branch(assert_base_branch(branch))
			logging.debug('checking out %s (from %s)' % (my_wip, branch))
			git_update_ref(ref_of_branch(my_wip), sha_of_commitish(branch))
			git_checkout_branch(my_wip)

def write_merge_branch(commit: Commitish) -> None:
	git_update_ref(ref_of_branch(merge_wip_branch()), commit)

def update_merge_branch(remote_merge: RemoteWipRef, local_merge: LocalWipRef):
	logging.debug('updating merge branch (%s: %s, %s: %s)' % (local_merge.ref, local_merge.sha, remote_merge.ref, remote_merge.sha))
	assert remote_merge.wip.is_merge and local_merge.wip.is_merge
	if is_ancestor(local_merge.ref, remote_merge.ref):
		logging.debug('fast-fowarding local branch')
		git_update_ref(local_merge.ref, remote_merge.ref)
	elif is_ancestor(remote_merge.ref, local_merge.ref):
		logging.debug('local branch is ahead, no action required')
	else:
		# branches have diverged, make a merge commit
		logging.debug('remote merge branch (%s) and local (%s) have diverged, merging' % (remote_merge.sha, local_merge.sha))
		empty_commit = Sha(run_output(['git', 'commit-tree', EMPTY_TREE,
			'-m', 'merge',
			'-p', local_merge.sha,
			'-p', remote_merge.sha], dry='FAKE_COMMIT'))
		write_merge_branch(empty_commit)
		assert(is_ancestor(remote_merge.ref, local_merge.ref))

def ensure_merge_branch(conf: Config, base: BaseBranch) -> WipBranch:
	refs = list(wip_refs(conf.explicit_remote()).values())
	merges = RefFilter.merges(refs)
	local_merge = first(RefFilter.local(merges))
	remote_merge = first(RefFilter.remote(merges))
	merge_branch = merge_wip_branch()

	if local_merge is None:
		# branch needs creating
		if remote_merge is None:
			# there are no merge branches at all, fabricate one
			empty_commit = Sha(run_output(['git', 'commit-tree', EMPTY_TREE, '-m', 'empty'], dry='FAKE_COMMIT'))
			write_merge_branch(empty_commit)
		else:
			write_merge_branch(remote_merge.ref)
	else:
		# we have a local branch, just make sure it's up to date:
		if remote_merge is not None:
			update_merge_branch(remote_merge=remote_merge, local_merge=local_merge)
	return merge_branch

def save_changes(conf: Config) -> None:
	if has_changes():
		ensure_wip_branch(conf)
		# there are some changes
		if has_changes(cached=True):
			# staged changes
			logging.info('storing staged changes...')
			run(['git', 'commit', '-m', 'WIP (staged)'])
		if has_changes():
			logging.info('storing uncommitted changes...')
			run(['git', 'commit', '-a', '-m', 'WIP (uncommitted)'])

def pull_changes(remote: Remote) -> None:
	logging.info('fetching wips from %s...' % (remote,))
	SLASH = '/'
	git_fetch(remote,
		# e.g. 'refs/heads/wip/*:refs/remotes/origin/wip/*'
		'+' + WIP_REF_PREFIX + '*:' + REMOTE_PREFIX + remote + SLASH + WIP_PREFIX + '*')

def get_pushable_refs(conf: Config) -> List[PushSpec]:
	refs = list(wip_refs(conf.explicit_remote()).values())
	result = []
	non_merge_refs = RefFilter.non_merges(refs)
	merge_refs = RefFilter.merges(refs)
	local_refs = RefFilter.local(non_merge_refs)
	remote_refs = RefFilter.remote(non_merge_refs)
	local_merge_ref = first(RefFilter.local(merge_refs))
	remote_merge_ref = first(RefFilter.remote(merge_refs))

	for local in local_refs:
		branch = local.wip.branch
		for remote in conf.remotes():
			remote_ref = RefFilter.for_remote(remote, local.wip, remote_refs)
			if remote_ref is None:
				result.append(PushSpec.track(branch))
				logging.debug("remote branch %s will be created at %s" % (
					branch, local.sha))
			elif remote_ref.sha != local.sha:
				logging.debug("pushing to remote branch %s (%s -> %s)" % (
					branch, remote_ref.sha, local.sha))
				result.append(PushSpec.track(branch))
			else:
				logging.debug("remote branch %s is up to date")

	if local_merge_ref:
		branch = local_merge_ref.wip.branch
		if remote_merge_ref is None:
			logging.debug('creating remote (%s)' % (branch))
			result.append(PushSpec.track(branch))
		else:
			update_merge_branch(remote_merge=remote_merge_ref, local_merge=local_merge_ref)
			if local_merge_ref.sha == remote_merge_ref.sha:
				logging.debug('remote branch %s is up to date (%s)' % (branch, remote_merge_ref.sha))
			else:
				logging.debug('pushing update to %s (%s -> %s)' % (
					branch,
					remote_merge_ref.sha,
					local_merge_ref.sha
				))
				result.append(PushSpec.track(branch))

	logging.debug("get_pushable_refs() -> %r" % (result))
	return result

def gc_action(conf: Config) -> None:
	# What if WIPs have a symbolic name, not a base branch? Could delete
	# them if they're merged into any non-wip branch?

	# collect the commits for each wip branch which are ahead of the base
	merge_branch = merge_wip_branch()
	if not try_run(['git', 'show-ref', '--verify', '--quiet', ref_of_branch(merge_branch)], dry=RUN_ANYWAY):
		logging.info('No local MERGE branch, skipping')
		return

	local_wip_refs = list(RefFilter.local(RefFilter.non_merges(wip_refs(conf.explicit_remote()).values())))
	if not local_wip_refs:
		logging.info('No local WIP branches, skipping')
		return

	logging.info('Checking wip branches: %s' % (', '.join([wip.wip.branch for wip in local_wip_refs])))
	proc = run_popen(['git', 'log', '--format=format:%s', '--full-history', '--topo-order', merge_branch], stdout=subprocess.PIPE, dry=RUN_ANYWAY)

	for line in proc.stdout:
		try:
			merge_json = json.loads(line)
		except json.JSONDecodeError as e:
			logging.debug('Skipping non-JSON merge message: %r', line)
			continue
		logging.debug('loaded JSON merge message: %r', merge_json)
		commit = Sha(merge_json['commit'])
		merge = Sha(merge_json['commit'])

		found = []

		for wip_ref in local_wip_refs:
			if commit == wip_ref.sha:
				logging.info('deleting fully-merged branch %s', wip_ref.wip.branch)
				run(['git', 'branch', '-D', wip_ref.wip.branch])
				found.append(wip_ref)

		for wip_ref in found:
			local_wip_refs.remove(wip_ref)

		if not local_wip_refs:
			logging.debug('all branches checked')
			break

	if proc.poll() == None:
		proc.kill()
	else:
		assert proc.returncode == 0

def push_refs(remote: Remote, specs: List[PushSpec]) -> None:
	if not specs:
		logging.info("Nothing to push")
		return
	else:
		logging.info("Pushing refs to %s" % (remote,))
		logging.debug("refs: %r" % (specs,))

	def do_push(specs: Iterable[PushSpec]):
		specs = list(filter(lambda spec: spec.is_for_remote(remote), specs))
		if not specs:
			return
		cmd = ['git', 'push']
		cmd.append(remote)
		cmd.extend([spec.spec for spec in specs])
		run(cmd, lvl=logging.INFO)
		# kind of dumb that git doesn't do this:
		# after pushing, write what we know to refs/remotes/<remote>/ref
		for spec in specs:
			if spec.src is None:
				git_delete_ref(spec.local_ref(remote))
			else:
				git_update_ref(spec.local_ref(remote), spec.src)

	do_push(specs)

## Utils:

def die(msg: str) -> None:
	raise AssertionError(msg)

def first(items: Iterable[T]) -> Optional[T]:
	try:
		return next(iter(items))
	except StopIteration:
		return None

def only(items: List[T]) -> T:
	if len(items) != 1:
		raise ValueError('expected single-length list, git %r' % (items,))
	return items[0]

## CLI actions:

def branch_status(conf: Config):
	branch = branch_of_ref(current_ref())
	suffix = ' (with uncommitted changes)' if has_changes() else ''
	def status(msg: str) -> None:
		print(msg + suffix)

	if branch:
		if is_wip_branch(branch):
			wip = Wip.parse(assert_wip_branch(branch))
			status('WIP branch: %s' % (branch,))
		else:
			status('branch: %s' % (branch,))
	else:
		status('no branch (%s)' % (current_commit()))

def status_action(conf: Config):
	print("")
	branch_status(conf)
	refs = list(wip_refs(conf.explicit_remote()).values())
	if refs:
		def wip_name(ref: WipRef) -> str:
			branch = branch_of_ref(ref.ref)
			return branch or ref.ref

		pushable_refs = get_pushable_refs(conf)
		local_wips = RefFilter.local(refs)
		remote_wips = RefFilter.remote(refs)
		if remote_wips:
			print('Remote WIP branches:')
			for remote_wip in sorted(remote_wips, key=wip_name):
				print(' - %s/%s' % (remote_wip.remote, remote_wip.wip.base))
		if local_wips:
			print('Local WIP branches: (%d to push)' % (len(local_wips),))
			for local_wip in sorted(local_wips, key=wip_name):
				# TODO
				requires_push = any([spec.src == local_wip.wip.branch for spec in pushable_refs])
				suffix = ' (*)' if requires_push else ''
				print(' - %s%s' % (local_wip.wip.base, suffix))

def save_action(conf: Config):
	if not has_changes():
		die('no changes to save')
	ensure_wip_branch(conf)
	save_changes(conf)
	# update_refs(conf)

def fetch_action(conf: Config):
	if conf.opts.offline: return False
	for remote in conf.remotes():
		pull_changes(remote)
	merge_refs = RefFilter.merges(list(wip_refs(conf.explicit_remote()).values()))
	remote_merge_refs = RefFilter.remote(merge_refs)
	local_merge_refs = RefFilter.local(merge_refs)

	# update all tracked merge branches
	for remote_merge in remote_merge_refs:
		local_merge = first(RefFilter.local(local_merge_refs))
		if local_merge is not None:
			update_merge_branch(remote_merge=remote_merge, local_merge=local_merge)

def _update_action(conf: Config, show=False):
	if has_changes():
		die("You have uncommitted changes")
	refs = list(wip_refs(conf.explicit_remote()).values())
	current_checkout = CurrentCheckout()

	def update_branch(base: BaseBranch):
		remote_refs = RefFilter.remote(RefFilter.for_base(base, refs))
		if not remote_refs:
			logging.info('no remote WIP branches for %s found' % (base))
			return

		my_wip = Wip(base)
		merge_branch = merge_wip_branch()
		current_checkout.move(my_wip.branch)
		def is_unmerged(remote: RemoteWipRef) -> bool:
			if is_ancestor(remote.sha, my_wip.branch):
				return False
			if is_ancestor(remote.sha, merge_branch):
				return False
			return True

		unmerged_remote_wips = filter(is_unmerged, remote_refs)
		unmerged_branches: List[Ref] = list(map(lambda wip: wip.ref, unmerged_remote_wips))
		args: List[str] = []
		if not is_ancestor(base, my_wip.branch):
			unmerged_branches.append(ref_of_branch(base))
		if not unmerged_branches:
			logging.info('%s is up to date with %s' % (my_wip.branch, ', '.join([wip.wip.branch for wip in remote_refs])))
			return
		if show:
			args = [x for x in unmerged_branches] # type coersion
			run(['git', 'show-branch', base, my_wip.branch] + args, dry=RUN_ANYWAY)
		else:
			logging.info('merging: %s' % (', '.join(unmerged_branches)))
			args = [x for x in unmerged_branches] # type coersion
			git_merge(['--no-edit'] + args)

	with current_checkout.restoring():
		if conf.opts.branch:
			update_branch(assert_base_branch(Branch(conf.opts.branch)))
		else:
			logging.info('Updating all branches with a local wip...')
			my_local_refs = RefFilter.local(RefFilter.non_merges(refs))
			# update all branches with a local wip
			for wipref in my_local_refs:
				update_branch(wipref.wip.base)

def delete_wip_branch_for(base: BaseBranch):
	wip = Wip(base)
	wip_branch = wip.branch
	branch_head = sha_of_commitish(wip_branch)
	if current_branch() == wip_branch:
		logging.info('checking out base branch %s' % (wip.base,))
		git_checkout_branch(wip.base)

	logging.info('deleting branch %s (%s)' % (wip_branch, branch_head))
	run(['git', 'branch', '-D', wip_branch])

def delete_action(conf: Config):
	base_branch = require_base_branch(conf.opts)
	delete_wip_branch_for(base_branch)

def get_base_branch(opts) -> Optional[BaseBranch]:
	if opts.branch:
		base_branch = assert_base_branch(opts.branch)
	else:
		branch = current_branch()
		if not branch:
			return None
		if is_wip_branch(branch):
			base_branch = Wip.parse(assert_wip_branch(branch)).base
		else:
			base_branch = assert_base_branch(branch)
	return base_branch

def require_base_branch(opts) -> BaseBranch:
	branch = get_base_branch(opts)
	if not branch:
		die('not on a branch (and --branch  not specified)')
		assert False # dumb typechecker, die never returns
	else:
		return branch

def checkout_action(conf: Config):
	base = require_base_branch(conf.opts)
	git_checkout_branch(base)
	ensure_wip_branch(conf)

def update_action(conf: Config):
	if has_changes():
		save_action(conf)
	_update_action(conf)

def pull_action(conf: Config):
	fetch_action(conf)
	update_action(conf)

def sync_action(conf: Config):
	pull_action(conf)
	push_action(conf)

def push_action(conf: Config):
	if conf.opts.offline: return
	refs = get_pushable_refs(conf)
	for remote in conf.remotes():
		push_refs(remote, refs)
	fetch_action(conf)

def diff_action(conf: Config):
	ref : Optional[Ref] = current_ref()
	branch : WipBranch = assert_wip_branch(branch_of_ref(ref))
	base: BaseBranch = base_branch_of_wip_branch(branch)
	run(['git', 'diff', base], dry=RUN_ANYWAY)

def show_action(conf: Config):
	base: BaseBranch = require_base_branch(conf.opts)
	refs = RefFilter.non_merges(RefFilter.for_base(base, list(wip_refs(conf.explicit_remote()).values())))
	local_refs = RefFilter.local(refs)
	remote_refs = RefFilter.remote(refs)

	def ref_of_wip_ref(ref: WipRef) -> str:
		return ref.ref

	branches: List[str] = [string_of_branch(base)] + (
		list(map(ref_of_wip_ref, local_refs)) +
		list(map(ref_of_wip_ref, remote_refs))
	)
	run(['git', 'show-branch'] + branches)

def merge_action(conf: Config, mark_without_merging=False):
	if has_changes():
		die('you have uncommitted changes')
	optional_ref: Optional[Ref] = current_ref()
	optional_branch: Optional[Branch] = branch_of_ref(optional_ref)
	if optional_branch is None:
		die('not on a branch')
	ref: Ref = assert_some(optional_ref)
	branch: Branch = assert_some(optional_branch)
	wip_branch = assert_wip_branch(branch)
	base: BaseBranch = base_branch_of_wip_branch(wip_branch)
	wip_ref: WipRef = LocalWipRef(ref=ref, wip=Wip.parse(wip_branch), sha=sha_of_commitish(ref))
	logging.info("merging branch %s (%s) into %s" % (branch, wip_ref.sha, base,))
	merge_branch = ensure_merge_branch(conf, base)
	merge_sha = sha_of_commitish(merge_branch)

	def mark_merged(ref):
		# update wip/<branch>/MERGE to mark when these WIP commits were merged
		head = sha_of_commitish(ref)
		data = {
			'commit': wip_ref.sha,
			'merge': head,
		}
		merge_message = json.dumps(data)
		merge_commit = Sha(run_output(['git', 'commit-tree', EMPTY_TREE, '-p', merge_sha, '-m', merge_message], dry='MERGE_SHA'))
		git_update_ref(ref_of_branch(merge_branch), merge_commit)

	if mark_without_merging:
		mark_merged(HEAD_REF)
	else:
		current_checkout = CurrentCheckout()
		with current_checkout.restoring():
			current_checkout.move(base)
			git_merge(['--squash', ref])
			run(['git', 'commit', '-v', '--edit', '-m', 'merge WIP changes'])
			mark_merged(HEAD_REF)

	delete_wip_branch_for(base)

def mark_merged_action(conf: Config):
	merge_action(conf, mark_without_merging=True)

def perform_interactive_rebase(filename: str):
	commits = []
	with open(filename) as f:
		for line in f:
			line = line.strip()
			if line.startswith('#'):
				logging.debug('dropping line: %s' % (line,))
			else:
				commits.append(line.split()[0])
	logging.debug('original commit seqence: %r' % (commits,))

	keep_commits = os.environ['GIT_WIP_KEEP_COMMITS']
	drop_commits = os.environ['GIT_WIP_DROP_COMMITS']
	expected_commits = set(keep_commits).union(drop_commits)
	if set(commits) != expected_commits:
		die('Expected commits: %r. Got %r' % (expected_commits, commits))

	with open(filename, 'w') as f:
		for commit in commits:
			if commit in keep_commits:
				logging.debug('keeping commit %s' % (commit,))
				print('keep ' + commit, file=f)
			else:
				logging.debug('dropping commit %s' % (commit,))

## main

def main() -> None:
	global DRY_RUN, VERBOSE

	usage='\n'.join([
		'git wip [action [action ...]]',
		'',
		'Actions:',
		' status:   default, show WIP details',
		' show:     show WIP branches (using git show-branch)',
		' diff:     show differences on WIP branch',
		'',
		' checkout: move to a WIP branch',
		' save:     commit changes as WIP',
		' push:     push WIPs to remote',
		'',
		' fetch:    fetch WIPs from remote',
		' update:   merge corresponding remote branches into local WIP branches',
		' pull:     fetch & update',
		' sync:     pull & push',
		'',
		' merge:    commit WIP to mainline branch (as a squashed commit)',
		' mark-merged: mark WIP as merged and discard',
		' gc:       remove fully merged WIP branches',
		' rm:       remove a WIP branch',
	])
	p = optparse.OptionParser(usage=usage)
	p.add_option('-v', '--verbose', action='store_true')
	p.add_option('-n', '--dry-run', action='store_true')
	p.add_option('-o', '--offline', action='store_true')
	p.add_option('--no-update', action='store_false', dest='update', default=None)
	p.add_option('-r', '--remote', action='store')
	p.add_option('-c', '--config', action='store')
	p.add_option('-b', '--branch', action='store')

	opts, args = p.parse_args()
	logging.basicConfig(
		format='%(levelname)5s: %(message)s',
		level = (logging.DEBUG if opts.verbose else logging.INFO)
	)

	if opts.dry_run:
		DRY_RUN = True
	if opts.verbose:
		VERBOSE = True

	if 'rebase-sequence' in args:
		(filename,) = args
		perform_interactive_rebase(filename)

	def help_action(conf):
		p.print_help()
		sys.exit(1)

	actions: Dict[str,Callable[[Config],None]] = {
		'status': status_action,
		'show': show_action,
		'checkout': checkout_action,
		'co': checkout_action,
		'gc': gc_action,
		'rm': delete_action,
		'fetch': fetch_action,
		'save': save_action,
		'sync': sync_action,
		'push': push_action,
		'pull': pull_action,
		'update': update_action,
		'diff': diff_action,
		'merge': merge_action,
		'mark-merged': mark_merged_action,
		'help': help_action,
	}

	unknown_actions = set(args).difference(actions.keys())
	if unknown_actions:
		die("Unknown action(s): %s" % (', '.join(sorted(unknown_actions)),))

	conf = Config.load(opts.config, opts)

	# default to status
	if not args:
		args.append('status')

	for action in args:
		actions[action](conf)


if __name__ == '__main__':
	try:
		main()
	except (subprocess.CalledProcessError, AssertionError) as e:
		if VERBOSE:
			raise
		else:
			logging.error(str(e))
			sys.exit(1)
